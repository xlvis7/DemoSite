function preloadEnd() {
    setTimeout(function() {
        $("#mainBody").removeClass("preload"), app.isInit = !0, $(".loader-logo-barre").css("opacity", 1), setTimeout(function() {
            $("#mainLoader").animate({
                opacity: 0
            }, 600, function() {
                $("#mainLoader").css("display", "none"), app.theContentView && (app.theContentView.render(), app.theContentView.$el.css("opacity", 0), app.theContentView.$el.animate({
                    opacity: 1
                }, 1800, "easeOutQuad", function() {}))
            })
        }, 1e3)
    }, 3e3)
}
var app = app || {},
    isInitLoad = !1;
! function() {
    "use strict";
    app.appModel = Backbone.Model.extend({
        defaults: {
            view: "global",
            compare: "total"
        }
    })
}(jQuery);
var app = app || {};
! function(a) {
    "use strict";
    app.appView = Backbone.View.extend({
        mainAppTemplate: _.template(a("#template_mainApp").html()),
        currentSlide: 1,
        chapters: [{
            index: 1,
            color: "color1"
        }, {
            index: 2,
            color: "color2"
        }, {
            index: 3,
            color: "color3"
        }, {
            index: 4,
            color: "color4"
        }, {
            index: 5,
            color: "color5"
        }, {
            index: 6,
            color: "color6"
        }, {
            index: 7,
            color: "color7"
        }, {
            index: 8,
            color: "color8"
        }, {
            index: 9,
            color: "color9"
        }, {
            index: 10,
            color: "color10"
        }, {
            index: 11,
            color: "color11"
        }],
        events: {
            swipe: "swipeControls",
            mousedown: "touchStart",
            mouseup: "touchEnd",
            panmove: "panMove",
            panend: "panEnd",
            dragright: "dragRight",
            mousemove: "mousePos",
            mouseover: "mousePos",
            mouseout: "mousePos",
            "click .header-left svg": "clickBackHome",
            "click .menu-mobile-item.item-about": "clickAbout",
            "click .menu-mobile-item.item-presskit": "clickPresse",
            "click .menu-mobile-item.item-nuansa": "clickBackHome",
            "click .menu-mobile svg": "clickBackHome",
            "click .header-right": "clickDownload"
        },
        clickDownload: function(b) {
            b.target == a(".header-right").get(0) && a(".header-right a")[0].click()
        },
        clickBackHome: function() {
            app.theAppRouter.navigate("", {
                trigger: !0
            })
        },
        clickPresse: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("pressekit", {
                trigger: !0
            })
        },
        clickAbout: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("about", {
                trigger: !0
            })
        },
        mousePos: function(b) {
            var c = a(window).width() / 4,
                d = a(window).width() - c;
            b.clientX < c ? a(".fleche-left").css("opacity", 1) : a(".fleche-left").css("opacity", 0), b.clientX > d ? a(".fleche-right").css("opacity", 1) : a(".fleche-right").css("opacity", 0)
        },
        panMove: function(b) {
            app.theContentView.disableAnimAuto(), b.gesture.deltaX > 0 ? a("#mainApp").attr("data-transition", "left") : b.gesture.deltaX < 0 && a("#mainApp").attr("data-transition", "right");
            var c = b.gesture.deltaX;
            b.gesture.deltaX < -150 ? c = -150 : b.gesture.deltaX > 150 && (c = 150)
        },
        panEnd: function(b) {
            a("#mainApp").attr("data-transition", ""), app.theContentView.enableAnimAuto()
        },
        touchStart: function() {
            a("#mainApp").addClass("panning")
        },
        touchEnd: function() {
            a("#mainApp").removeClass("panning")
        },
        navigateSlide: function(a) {
            app.theContentView.disableAnimAuto(), this.currentSlide = this.currentSlide + a, this.currentSlide > this.chapters.length ? this.currentSlide = 1 : this.currentSlide < 1 && (this.currentSlide = this.chapters.length), this.$el.attr("data-step", this.chapters[this.currentSlide - 1].index), this.$el.attr("data-colval", this.chapters[this.currentSlide - 1].color), app.theContentView.enableAnimAuto()
        },
        navigateToSlide: function(a) {
            app.theContentView.disableAnimAuto(), this.currentSlide = a, this.currentSlide > this.chapters.length ? this.currentSlide = 1 : this.currentSlide < 1 && (this.currentSlide = this.chapters.length), this.$el.attr("data-step", this.chapters[this.currentSlide - 1].index), this.$el.attr("data-colval", this.chapters[this.currentSlide - 1].color), app.theContentView.enableAnimAuto()
        },
        swipeControls: function(a) {
            a.gesture.deltaX < 0 ? this.navigateSlide(1) : a.gesture.deltaX > 0 && this.navigateSlide(-1)
        },
        dragging: function(a) {},
        initialize: function() {
            var b = this;
            b.render(), a(document).bind("keyup", function(a) {
                "39" == a.keyCode ? b.navigateSlide(1) : "37" == a.keyCode && b.navigateSlide(-1)
            })
        },
        modelChangeView: function() {
            this.render()
        },
        render: function() {
            return this.$el.html(this.mainAppTemplate(this.model.toJSON())), this.hammer = this.$el.hammer(), a(document).on("panmove", function(a) {}), a(document).on("panend", function(a) {}), this
        }
    })
}(jQuery);
var app = app || {};
! function(a) {
    "use strict";
    app.homeView = Backbone.View.extend({
        tagName: "section",
        className: "global-wrapper",
        isTemplate: "",
        innerSteps: 0,
        currentStep: 1,
        events: {
            "click .presskit": "clickPresse",
            "click .about": "clickAbout",
            "click .fleche-left": "clickPrev",
            "click .visual-nav-col": "clickNav",
            "click .fleche-right": "clickNext"
        },
        clickDownload: function(b) {
            b.preventDefault(), b.stopPropagation(), a(".menu-download a").trigger("click")
        },
        clickNav: function(b) {
            var c = a(b.currentTarget).attr("data-nav");
            app.theAppView.navigateToSlide(c)
        },
        clickNext: function() {
            app.theAppView.navigateSlide(1)
        },
        clickPrev: function() {
            app.theAppView.navigateSlide(-1)
        },
        clickPresse: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("pressekit", {
                trigger: !0
            })
        },
        clickAbout: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("about", {
                trigger: !0
            })
        },
        initialize: function() {
            var b = this;
            this.isTemplate = _.template(a("#template_homeView").html()), this.render(), app.theAppEvents.on("resizeStage", function(a) {
                b.resizeView()
            })
        },
        enableAnimAuto: function() {
            var a = this;
            a.intervalAuto && clearTimeout(a.intervalAuto), a.intervalAuto = setTimeout(function() {
                app.theAppView.navigateSlide(1), a.enableAnimAuto()
            }, 5e3)
        },
        disableAnimAuto: function() {
            var a = this;
            a.intervalAuto && clearTimeout(a.intervalAuto)
        },
        render: function() {
            if (app.isInit) {
                var b = this;
                return this.$el.html(this.isTemplate(this.model.toJSON())), setTimeout(function() {
                    a("#mainPart").addClass("show")
                }, 10), b.intervalAuto && clearTimeout(b.intervalAuto), b.intervalAuto = setTimeout(function() {
                    b.enableAnimAuto()
                }, 10), this
            }
        },
        remove: function() {
            return this.disableAnimAuto(), this.$el.empty().off(), this.stopListening(), this
        },
        resizeView: function() {}
    })
}(jQuery);
var app = app || {};
! function(a) {
    "use strict";
    app.pressekitView = Backbone.View.extend({
        tagName: "section",
        className: "global-wrapper",
        isTemplate: "",
        innerSteps: 0,
        currentStep: 1,
        events: {
            "click .popin-close": "backHome",
            "click .presskit": "clickPresse",
            "click .about": "clickAbout"
        },
        backHome: function() {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("", {
                trigger: !0
            })
        },
        clickPresse: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("pressekit", {
                trigger: !0
            })
        },
        clickAbout: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("about", {
                trigger: !0
            })
        },
        initialize: function() {
            var b = this;
            this.isTemplate = _.template(a("#template_pressekitView").html()), this.render(), app.theAppEvents.on("resizeStage", function(a) {
                b.resizeView()
            })
        },
        render: function() {
            if (app.isInit) {
                return this.$el.html(this.isTemplate(this.model.toJSON())), setTimeout(function() {
                    a("#mainPart").addClass("show")
                }, 10), this
            }
        },
        remove: function() {
            return this.$el.empty().off(), this.stopListening(), this
        },
        resizeView: function() {}
    })
}(jQuery);
var app = app || {};
! function(a) {
    "use strict";
    app.aboutView = Backbone.View.extend({
        tagName: "section",
        className: "global-wrapper",
        isTemplate: "",
        innerSteps: 0,
        currentStep: 1,
        events: {
            "click .popin-close": "backHome",
            "click .presskit": "clickPresse",
            "click .about": "clickAbout"
        },
        backHome: function() {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("", {
                trigger: !0
            })
        },
        clickPresse: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("pressekit", {
                trigger: !0
            })
        },
        clickAbout: function(a) {
            app.theAppView.prevInnerChapterIndex = -1, app.theAppRouter.navigate("about", {
                trigger: !0
            })
        },
        initialize: function() {
            var b = this;
            this.isTemplate = _.template(a("#template_aboutView").html()), this.render(), app.theAppEvents.on("resizeStage", function(a) {
                b.resizeView()
            })
        },
        render: function() {
            if (app.isInit) {
                return this.$el.html(this.isTemplate(this.model.toJSON())), setTimeout(function() {
                    a("#mainPart").addClass("show")
                }, 10), this
            }
        },
        remove: function() {
            return this.$el.empty().off(), this.stopListening(), this
        },
        resizeView: function() {}
    })
}(jQuery);
var app = app || {};
! function(a) {
    "use strict";
    app.appRouter = Backbone.Router.extend({
        routes: {
            "": "homeView",
            pressekit: "pressekitView",
            about: "aboutView"
        },
        createMainView: function(b) {
            a("#mainPart").removeClass("show"), app.theAppView = app.theAppView || new app.appView({
                el: a("#mainApp"),
                model: app.theAppModel
            })
        },
        animColorsLogo: function() {
            var b = ["#c3a415", "#2f7c97", "#ce133d", "#e97fa5", "#493b5c", "#dddddd", "#8e874f"],
                c = 0;
            this.animLogoInterval = setInterval(function() {
                a(".loader-logo svg").css("fill", b[c]), c++, c > b.length - 1 && (c = 0)
            }, 500)
        },
        homeView: function() {
            var b = this;
            ga("set", "page", "/"), ga("send", "pageview"), 0 == isInitLoad && (isInitLoad = !0, b.animColorsLogo(), setTimeout(function() {
                a("#mainLoader").addClass("animstart")
            }, 10)), this.createMainView(-1), app.theContentView ? this.transitionView("homeView") : (app.theContentView = app.theContentView || new app.homeView({
                el: a("#mainPart"),
                model: app.theAppModel
            }), a("body").attr("data-view", "homeView"), a(".header-title").html("&nbsp;Nuansa"), a(".menu-mobile .menu-mobile-item").removeClass("current"), a(".menu-mobile .menu-mobile-item.item-nuansa").addClass("current"), a("html, body").animate({
                scrollTop: 0
            }, "slow"))
        },
        pressekitView: function() {
            var b = this;
            ga("set", "page", "/presskit"), ga("send", "pageview"), 0 == isInitLoad && (isInitLoad = !0, b.animColorsLogo(), setTimeout(function() {
                a("#mainLoader").addClass("animstart")
            }, 10)), this.createMainView(-1), app.theContentView ? this.transitionView("pressekitView") : (app.theContentView = app.theContentView || new app.pressekitView({
                el: a("#mainPart"),
                model: app.theAppModel
            }), a("body").attr("data-view", "pressekitView"), a(".header-title").html("&nbsp;/&nbsp;Presskit"), a(".menu-mobile .menu-mobile-item").removeClass("current"), a(".menu-mobile .menu-mobile-item.item-presskit").addClass("current"), a("html, body").animate({
                scrollTop: 0
            }, "slow"))
        },
        aboutView: function() {
            var b = this;
            ga("set", "page", "/about"), ga("send", "pageview"), 0 == isInitLoad && (isInitLoad = !0, b.animColorsLogo(), setTimeout(function() {
                a("#mainLoader").addClass("animstart")
            }, 10)), this.createMainView(-1), app.theContentView ? this.transitionView("aboutView") : (app.theContentView = app.theContentView || new app.aboutView({
                el: a("#mainPart"),
                model: app.theAppModel
            }), a("body").attr("data-view", "aboutView"), a(".header-title").html("&nbsp;/&nbsp;About"), a(".menu-mobile .menu-mobile-item").removeClass("current"), a(".menu-mobile .menu-mobile-item.item-about").addClass("current"), a("html, body").animate({
                scrollTop: 0
            }, "slow"))
        },
        transitionView: function(b) {
            app.theContentView.$el.animate({
                opacity: 0
            }, 300, function() {
                switch (app.theContentView.remove(), app.theContentView = null, app.theContentView = new app[b]({
                    el: a("#mainPart"),
                    model: app.theAppModel
                }), a("body").attr("data-view", b), b) {
                    case "homeView":
                        a(".header-title").html("&nbsp;Nuansa"), a(".menu-mobile .menu-mobile-item").removeClass("current"), a(".menu-mobile .menu-mobile-item.item-nuansa").addClass("current"), a("html, body").animate({
                            scrollTop: 0
                        }, "slow");
                        break;
                    case "aboutView":
                        a(".header-title").html("&nbsp;/&nbsp;About"), a(".menu-mobile .menu-mobile-item").removeClass("current"), a(".menu-mobile .menu-mobile-item.item-about").addClass("current"), a("html, body").animate({
                            scrollTop: 0
                        }, "slow");
                        break;
                    case "pressekitView":
                        a(".header-title").html("&nbsp;/&nbsp;Presskit"), a(".menu-mobile .menu-mobile-item").removeClass("current"), a(".menu-mobile .menu-mobile-item.item-presskit").addClass("current"), a("html, body").animate({
                            scrollTop: 0
                        }, "slow")
                }
                app.theContentView.$el.animate({
                    opacity: 1
                }, 300, function() {})
            })
        }
    })
}(jQuery);
var app = app || {};
$(function() {
    "use strict";
    app.isInit = !1, app.theAppRouter = new app.appRouter, app.theAppEvents = {}, _.extend(app.theAppEvents, Backbone.Events), app.theAppModel = new app.appModel({
        state: "default"
    }), isMobile.any() && $("body").addClass("isMobile"), app.theAppRouter.on("route", function(a, b) {
        Backbone.history.getFragment();
        app.theAppEvents.trigger("resizeStage", !1)
    }), Backbone.history.start({
        pushState: !0,
        root: "/"
    }), $().ready(function() {
        app.theAppEvents.trigger("resizeStage", !1)
    }), $(window).resize(function() {
        app.theAppEvents.trigger("resizeStage", !1)
    })
}), window.addEventListener ? window.addEventListener("load", preloadEnd) : window.attachEvent ? window.attachEvent("onload", preloadEnd) : window.onload = preloadEnd;
var isMobile = {
    Android: function() {
        return navigator.userAgent.match(/Android/i)
    },
    BlackBerry: function() {
        return navigator.userAgent.match(/BlackBerry/i)
    },
    iOS: function() {
        return navigator.userAgent.match(/iPhone|iPod|iPad/i)
    },
    Opera: function() {
        return navigator.userAgent.match(/Opera Mini/i)
    },
    Windows: function() {
        return navigator.userAgent.match(/IEMobile/i)
    },
    Bq: function() {
        return navigator.userAgent.match(/bq/i)
    },
    any: function() {
        return isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows()
    }
};